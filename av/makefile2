#目录
SRCDIR := src
BUILDDIR := build
TARGETDIR := bin
SOURCES := $(shell find . -name *.cpp)
OBJECTS := $(notdir $(SOURCES:%.cpp=%.o))
OBJS    := $(patsubst $(SRCDIR)/%, $(BUILDDIR)/%, $(SOURCES:.cpp=.o))
SRCS := $(shell find . -name *.cpp)
OBS :=	$(patsubst %.cpp, $(BUILDDIR)%.o, $(SRCS))
TESTS :=  $(SRCS:%.cpp=	%.o)
SORTS := $(sort $(dir $(TESTS)))
VPATH := $(SORTS)
# $@ 目标文件的名称
# $^ 所有依赖文件，以空格分开，不包含重复的依赖文件
# $<
#
# foo := a.o b.o c.o
# bar := $(foo:.o=.c) 把foo 中的所有的以"o"结尾的字符串全部替换成以 "c" 结尾, 所以这时bar 的值就是 "a.c b.c c.c" 
#

av:$(OBJECTS)
	@mkdir -p $(TARGETDIR)
	@cd build;clang++ $(OBJECTS) -lavutil -o ../$(TARGETDIR)/av

$(OBJECTS): %.o : %.cpp
	@echo compiling $<
	@mkdir -p build
	@clang++ -Wall -std=c++11 -stdlib=libc++ -c $< -o $(BUILDDIR)/$@ -I src/
#.PHONY : clean 
#clean : `
#rm av av.o

.PHONY : test
test:
	@echo "objects" $(OBJECTS)
	@echo "objs:" $(OBJS)
	@echo "srcs:" $(SRCS)
	@echo "pwd:" $(PWD)
	@echo "sources": $(SOURCES)
	@echo "obs:": $(OBS)
	@echo "tests": $(TESTS)
	@echo "dir:" $(dir $(TESTS))
	@echo "notdir:" $(notdir $(TESTS))
	@echo "sort": $(SORTS)
